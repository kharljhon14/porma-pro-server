// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: personal_info.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPersonalInfo = `-- name: CreatePersonalInfo :one
INSERT INTO personal_infos (
    account_id,
    full_name,
    email,
    phone_number,
    linkedin_url,
    personal_url,
    country,
    state,
    city
) VALUES (
 $1, $2, $3,
 $4, $5, $6,
 $7, $8, $9
) RETURNING id, account_id, full_name, email, phone_number, linkedin_url, personal_url, country, state, city
`

type CreatePersonalInfoParams struct {
	AccountID   int64       `json:"account_id"`
	FullName    string      `json:"full_name"`
	Email       string      `json:"email"`
	PhoneNumber string      `json:"phone_number"`
	LinkedinUrl pgtype.Text `json:"linkedin_url"`
	PersonalUrl pgtype.Text `json:"personal_url"`
	Country     string      `json:"country"`
	State       string      `json:"state"`
	City        string      `json:"city"`
}

func (q *Queries) CreatePersonalInfo(ctx context.Context, arg CreatePersonalInfoParams) (PersonalInfo, error) {
	row := q.db.QueryRow(ctx, createPersonalInfo,
		arg.AccountID,
		arg.FullName,
		arg.Email,
		arg.PhoneNumber,
		arg.LinkedinUrl,
		arg.PersonalUrl,
		arg.Country,
		arg.State,
		arg.City,
	)
	var i PersonalInfo
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.FullName,
		&i.Email,
		&i.PhoneNumber,
		&i.LinkedinUrl,
		&i.PersonalUrl,
		&i.Country,
		&i.State,
		&i.City,
	)
	return i, err
}

const deletePersonalInfo = `-- name: DeletePersonalInfo :exec
DELETE FROM personal_infos
WHERE id = $1 AND account_id = $2
`

type DeletePersonalInfoParams struct {
	ID        int64 `json:"id"`
	AccountID int64 `json:"account_id"`
}

func (q *Queries) DeletePersonalInfo(ctx context.Context, arg DeletePersonalInfoParams) error {
	_, err := q.db.Exec(ctx, deletePersonalInfo, arg.ID, arg.AccountID)
	return err
}

const getPersonalInfo = `-- name: GetPersonalInfo :one
SELECT id, account_id, full_name, email, phone_number, linkedin_url, personal_url, country, state, city FROM personal_infos
WHERE id = $1 AND account_id = $2
`

type GetPersonalInfoParams struct {
	ID        int64 `json:"id"`
	AccountID int64 `json:"account_id"`
}

func (q *Queries) GetPersonalInfo(ctx context.Context, arg GetPersonalInfoParams) (PersonalInfo, error) {
	row := q.db.QueryRow(ctx, getPersonalInfo, arg.ID, arg.AccountID)
	var i PersonalInfo
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.FullName,
		&i.Email,
		&i.PhoneNumber,
		&i.LinkedinUrl,
		&i.PersonalUrl,
		&i.Country,
		&i.State,
		&i.City,
	)
	return i, err
}

const updatePersonalInfo = `-- name: UpdatePersonalInfo :one
UPDATE personal_infos
SET full_name = $1,
    email = $2,
    phone_number = $3,
    linkedin_url = $4,
    personal_url = $5,
    country = $6,
    state = $7,
    city = $8
WHERE id = $9 AND account_id = $10
RETURNING id, account_id, full_name, email, phone_number, linkedin_url, personal_url, country, state, city
`

type UpdatePersonalInfoParams struct {
	FullName    string      `json:"full_name"`
	Email       string      `json:"email"`
	PhoneNumber string      `json:"phone_number"`
	LinkedinUrl pgtype.Text `json:"linkedin_url"`
	PersonalUrl pgtype.Text `json:"personal_url"`
	Country     string      `json:"country"`
	State       string      `json:"state"`
	City        string      `json:"city"`
	ID          int64       `json:"id"`
	AccountID   int64       `json:"account_id"`
}

func (q *Queries) UpdatePersonalInfo(ctx context.Context, arg UpdatePersonalInfoParams) (PersonalInfo, error) {
	row := q.db.QueryRow(ctx, updatePersonalInfo,
		arg.FullName,
		arg.Email,
		arg.PhoneNumber,
		arg.LinkedinUrl,
		arg.PersonalUrl,
		arg.Country,
		arg.State,
		arg.City,
		arg.ID,
		arg.AccountID,
	)
	var i PersonalInfo
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.FullName,
		&i.Email,
		&i.PhoneNumber,
		&i.LinkedinUrl,
		&i.PersonalUrl,
		&i.Country,
		&i.State,
		&i.City,
	)
	return i, err
}
