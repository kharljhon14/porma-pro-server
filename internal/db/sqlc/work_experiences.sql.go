// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: work_experiences.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createWorkExperience = `-- name: CreateWorkExperience :one
INSERT INTO work_experiences (
    account_id,
    role,
    company,
    location,
    summary,
    start_date,
    end_date
) VALUES (
    $1, $2, $3,
    $4, $5, $6,
    $7
) RETURNING id, account_id, role, company, location, summary, start_date, end_date
`

type CreateWorkExperienceParams struct {
	AccountID int64            `json:"account_id"`
	Role      string           `json:"role"`
	Company   string           `json:"company"`
	Location  string           `json:"location"`
	Summary   string           `json:"summary"`
	StartDate pgtype.Timestamp `json:"start_date"`
	EndDate   pgtype.Timestamp `json:"end_date"`
}

func (q *Queries) CreateWorkExperience(ctx context.Context, arg CreateWorkExperienceParams) (WorkExperience, error) {
	row := q.db.QueryRow(ctx, createWorkExperience,
		arg.AccountID,
		arg.Role,
		arg.Company,
		arg.Location,
		arg.Summary,
		arg.StartDate,
		arg.EndDate,
	)
	var i WorkExperience
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Role,
		&i.Company,
		&i.Location,
		&i.Summary,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}

const deleteWorkExperience = `-- name: DeleteWorkExperience :exec
DELETE FROM work_experiences
WHERE id = $1
`

func (q *Queries) DeleteWorkExperience(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteWorkExperience, id)
	return err
}

const getWorkExperience = `-- name: GetWorkExperience :one
SELECT id, account_id, role, company, location, summary, start_date, end_date FROM work_experiences
WHERE id = $1
`

func (q *Queries) GetWorkExperience(ctx context.Context, id int64) (WorkExperience, error) {
	row := q.db.QueryRow(ctx, getWorkExperience, id)
	var i WorkExperience
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Role,
		&i.Company,
		&i.Location,
		&i.Summary,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}

const getWorkExperiences = `-- name: GetWorkExperiences :many
SELECT id, account_id, role, company, location, summary, start_date, end_date FROM work_experiences
WHERE account_id = $1
`

func (q *Queries) GetWorkExperiences(ctx context.Context, accountID int64) ([]WorkExperience, error) {
	rows, err := q.db.Query(ctx, getWorkExperiences, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WorkExperience{}
	for rows.Next() {
		var i WorkExperience
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Role,
			&i.Company,
			&i.Location,
			&i.Summary,
			&i.StartDate,
			&i.EndDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWorkExperience = `-- name: UpdateWorkExperience :one
UPDATE work_experiences
SET role = $1,
    company = $2,
    location = $3,
    summary = $4,
    start_date = $5,
    end_date = $6
WHERE id = $7
RETURNING id, account_id, role, company, location, summary, start_date, end_date
`

type UpdateWorkExperienceParams struct {
	Role      string           `json:"role"`
	Company   string           `json:"company"`
	Location  string           `json:"location"`
	Summary   string           `json:"summary"`
	StartDate pgtype.Timestamp `json:"start_date"`
	EndDate   pgtype.Timestamp `json:"end_date"`
	ID        int64            `json:"id"`
}

func (q *Queries) UpdateWorkExperience(ctx context.Context, arg UpdateWorkExperienceParams) (WorkExperience, error) {
	row := q.db.QueryRow(ctx, updateWorkExperience,
		arg.Role,
		arg.Company,
		arg.Location,
		arg.Summary,
		arg.StartDate,
		arg.EndDate,
		arg.ID,
	)
	var i WorkExperience
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Role,
		&i.Company,
		&i.Location,
		&i.Summary,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}
