// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: accounts.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts(
    email,
    password_hash,
    full_name
) VALUES(
 $1, $2, $3
) RETURNING id, email, password_hash, full_name, created_at, updated_at, is_verified
`

type CreateAccountParams struct {
	Email        string `json:"email"`
	PasswordHash string `json:"password_hash"`
	FullName     string `json:"full_name"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, createAccount, arg.Email, arg.PasswordHash, arg.FullName)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.FullName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsVerified,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM accounts
WHERE id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAccount, id)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, email, password_hash, full_name, created_at, updated_at, is_verified FROM accounts
WHERE id = $1
`

func (q *Queries) GetAccount(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRow(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.FullName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsVerified,
	)
	return i, err
}

const getAccountByEmail = `-- name: GetAccountByEmail :one
SELECT id, email, password_hash, full_name, created_at, updated_at, is_verified FROM accounts
WHERE email = $1
`

func (q *Queries) GetAccountByEmail(ctx context.Context, email string) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountByEmail, email)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.FullName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsVerified,
	)
	return i, err
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE accounts
SET full_name = $1,
    updated_at = $2
WHERE id = $3
RETURNING id, email, password_hash, full_name, created_at, updated_at, is_verified
`

type UpdateAccountParams struct {
	FullName  string           `json:"full_name"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
	ID        int64            `json:"id"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, updateAccount, arg.FullName, arg.UpdatedAt, arg.ID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.FullName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsVerified,
	)
	return i, err
}

const verifyAccount = `-- name: VerifyAccount :one
UPDATE accounts
SET is_verified = true
WHERE id = $1
RETURNING id, email, password_hash, full_name, created_at, updated_at, is_verified
`

func (q *Queries) VerifyAccount(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRow(ctx, verifyAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.FullName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsVerified,
	)
	return i, err
}
