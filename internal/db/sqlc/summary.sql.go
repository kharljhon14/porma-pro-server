// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: summary.sql

package db

import (
	"context"
)

const createSummary = `-- name: CreateSummary :one
INSERT INTO summaries(
    account_id,
    summary
) VALUES (
    $1, $2
) RETURNING id, account_id, summary
`

type CreateSummaryParams struct {
	AccountID int64  `json:"account_id"`
	Summary   string `json:"summary"`
}

func (q *Queries) CreateSummary(ctx context.Context, arg CreateSummaryParams) (Summary, error) {
	row := q.db.QueryRow(ctx, createSummary, arg.AccountID, arg.Summary)
	var i Summary
	err := row.Scan(&i.ID, &i.AccountID, &i.Summary)
	return i, err
}

const deleteSummary = `-- name: DeleteSummary :exec
DELETE FROM summaries
WHERE id = $1
`

func (q *Queries) DeleteSummary(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteSummary, id)
	return err
}

const getSummary = `-- name: GetSummary :one
SELECT id, account_id, summary FROM summaries
WHERE id = $1
`

func (q *Queries) GetSummary(ctx context.Context, id int64) (Summary, error) {
	row := q.db.QueryRow(ctx, getSummary, id)
	var i Summary
	err := row.Scan(&i.ID, &i.AccountID, &i.Summary)
	return i, err
}

const updateSummary = `-- name: UpdateSummary :one
UPDATE summaries
SET summary = $1
WHERE id = $2
RETURNING id, account_id, summary
`

type UpdateSummaryParams struct {
	Summary string `json:"summary"`
	ID      int64  `json:"id"`
}

func (q *Queries) UpdateSummary(ctx context.Context, arg UpdateSummaryParams) (Summary, error) {
	row := q.db.QueryRow(ctx, updateSummary, arg.Summary, arg.ID)
	var i Summary
	err := row.Scan(&i.ID, &i.AccountID, &i.Summary)
	return i, err
}
